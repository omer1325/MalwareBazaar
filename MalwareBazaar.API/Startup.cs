using MalwareBazaar.Core.Models;
using MalwareBazaar.Core.Repositories;
using MalwareBazaar.Core.Services;
using MalwareBazaar.Core.UnitOfWorks;
using MalwareBazaar.Data;
using MalwareBazaar.Data.Repositories;
using MalwareBazaar.Data.UnitOfWorks;
using MalwareBazaar.Service.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace MalwareBazaar.API
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<AppDbContext>(opts =>
            {
                opts.UseSqlServer(Configuration["ConnectionStrings:DefaultConnectionStrings"].ToString(), o =>
                {
                    //Burada o parametresi ile farklý bir projede olan DataContextimizi çekiyoruz.
                    o.MigrationsAssembly("MalwareBazaar.Data");
                });
            });

            services.AddIdentity<AppUser, IdentityRole>(opts =>
            {
                opts.User.AllowedUserNameCharacters = "abcçdefgðhýijklmnoöpqrsþtuüvwxyzABCÇDEFGÐHIÝJKLMNOÖPQRSÞTUÜVWXYZ0123456789-._";
                opts.Password.RequiredLength = 4;
                opts.Password.RequireNonAlphanumeric = false;
                opts.Password.RequireUppercase = false;
                opts.Password.RequireLowercase = false;
                opts.Password.RequireDigit = false;
            })
                .AddEntityFrameworkStores<AppDbContext>()
                .AddDefaultTokenProviders();

            services.AddScoped(typeof(IHashRepository<>), typeof(HashRepository<>));
            services.AddScoped(typeof(IRepository<>), typeof(Repository<>));
            services.AddScoped(typeof(IService<>), typeof(Service<>));
            services.AddScoped(typeof(IHashService<>), typeof(HashService<>));
            services.AddScoped<IUnitOfWork, UnitOfWork>();


            CookieBuilder cookieBuilder = new CookieBuilder();

            cookieBuilder.Name = "MalwareBazaar";
            //Cookie bilgisini kötü amaçlý kullanýclar okumasýn diye False yapýyoruz.
            cookieBuilder.HttpOnly = false;
            //Eðer proje kritik bilgiler içerseydi örneðin banka bilgileri gibi, bu özleliði Strict yapmamýz lazým. Kötü amaçlý kullanýcýlar Cookie bilgilerini kullanamasýn diye.
            cookieBuilder.SameSite = SameSiteMode.Lax;
            //Always dersen bütün istekler HTTPS den gönderilir. 
            cookieBuilder.SecurePolicy = CookieSecurePolicy.SameAsRequest;


            services.ConfigureApplicationCookie(opts =>
            {
                opts.Cookie = cookieBuilder;
                opts.SlidingExpiration = true;
                opts.ExpireTimeSpan = TimeSpan.FromDays(60);
            });

            services.AddCors(options =>
            {
                options.AddPolicy("foo",
                builder =>
                {
                    // Not a permanent solution, but just trying to isolate the problem
                    builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader();
                });
            });

            services.AddControllers();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseCors("foo");

            app.UseAuthentication();

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
