using MalwareBazaar.Core.DTOs;
using MalwareBazaar.Core.Models;
using MalwareBazaar.Core.Repositories;
using MalwareBazaar.Core.UnitOfWorks;
using Microsoft.EntityFrameworkCore;
using Nancy.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace MalwareBazaar.Data.Repositories
{
    public class HashRepository<TEntity> : IHashRepository<Hash> where TEntity : class
    {

        static readonly HttpClient client = new HttpClient();

        private readonly IRepository<Hash> _repository;
        public readonly IUnitOfWork _unitOfWork;

        public HashRepository(IRepository<Hash> repository, IUnitOfWork unitOfWork)
        {
            _repository = repository;
            _unitOfWork = unitOfWork;
        }



        public async Task DbSaveHashDetail(string md5)
        {         
                var values = new Dictionary<string, string>
                {
                    { "query", "get_info" },
                    //{ "hash", hash }
                    { "hash", md5 }
                };
                var content = new FormUrlEncodedContent(values);

                var response = await client.PostAsync("https://mb-api.abuse.ch/api/v1/", content);

                var responseString = await response.Content.ReadAsStringAsync();

                JavaScriptSerializer j = new JavaScriptSerializer();
                HashDTO a = j.Deserialize<HashDTO>(responseString);
                var hashDetail = new Hash
                {
                    first_seen = Convert.ToDateTime(a.data[0].first_seen),
                    md5_hash = a.data[0].md5_hash,
                    sha1_hash = a.data[0].sha1_hash,
                    sha256_hash = a.data[0].sha256_hash,
                    Signature = a.data[0].Signature,
                    Tags = string.Join(" ", a.data[0].tags)

                };

                await _repository.AddAsync(hashDetail);
                await _unitOfWork.CommitAsync();

            }

        public async Task<IEnumerable<Hash>> GetAllAsync()
        {
          return await _repository.GetAllAsync();
        }

        public async Task SetAllMd5All()
        {
           
            HttpResponseMessage response = await client.GetAsync("https://bazaar.abuse.ch/export/txt/md5/recent/");
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();
            string[] md5HashList = responseBody.Split("\r\n");

            foreach (var item in md5HashList)
            {
                
                if (!item.Contains("#"))
                {
                    await DbSaveHashDetail(item);
                }
                
            }
        }

        public void Remove(Hash hash)
        {
            _repository.Remove(hash);
        }

        public async Task RemoveById(int id)
        {
            var entity = await GetByIdAsync(id);
            Remove(entity);
        }

        public async Task<Hash> GetByIdAsync(int id)
        {
            var product = await _repository.GetByIdAsync(id);
            return product;
        }

        public void Update(Hash entity)
        {
           _repository.Update(entity);
        }
    }
}
